{"version":3,"sources":["userCard/userCard.tsx","serviceWorkerRegistration.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["UserCard","props","className","src","avatar","alt","first_name","last_name","email","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","App","useState","users","setUsers","updateRef","useRef","useEffect","json","showPopUp","current","map","user","id","ref","onClick","event","waiting","postMessage","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8a540ce5.chunk.js","sourcesContent":["import React from 'react';\n\ninterface UserCardInterface {\n    avatar: string,\n    first_name: string,\n    last_name: string,\n    email: string\n}\n\nfunction UserCard(props: UserCardInterface) {\n    return (\n        <div className=\"user-card\">\n            <div className=\"user-card-avatar\">\n                <img src={props?.avatar} alt=\"user-avatar\" className=\"user-avatar\" />\n            </div>\n            <div className=\"user-card-name\">\n                {props.first_name + ' ' + props.last_name}\n            </div>\n\n            <div className=\"user-card-email\">\n                {props.email}\n            </div>\n        </div>\n    )\n}\n\nexport default UserCard;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport './App.css';\nimport UserCard from './userCard/userCard';\nimport * as serviceWorker from './serviceWorkerRegistration';\n\ninterface UserInterface {\n  avatar: string,\n  email: string,\n  first_name: string,\n  id: number,\n  last_name: string\n}\n\nfunction App() {\n\n  const [users, setUsers] = useState<UserInterface[]>([]);\n  const updateRef = useRef<HTMLDivElement | null>(null);\n\n  useEffect(() => {\n    fetch(\"https://6021303e46f1e40017804036.mockapi.io/users\")\n      .then(users => users.json())\n      .then((users: any) => {\n        setUsers(users);\n      })\n  }, []);\n\n  useEffect(() => {\n    serviceWorker.register({onUpdate: showPopUp});\n  }, []);\n\n  const showPopUp = () => {\n    if (updateRef.current) updateRef.current.className = updateRef.current.className + ' show';\n  }\n\n  const updateServiceWorker = () => {\n    navigator.serviceWorker.ready.then((event) => {\n      event.waiting?.postMessage({type: 'SKIP_WAITING'});\n      if (updateRef.current) updateRef.current.className = 'updateContainer';\n    });\n  }\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"users\">\n      {users?.map((user: UserInterface) => {\n        return (\n          <div key={user.id} className=\"user-card-wrapper\">\n            <UserCard {...user}></UserCard>\n          </div>\n        )\n      })}\n      </div>\n      \n      <div className=\"updateContainer\" id=\"notification\" ref={updateRef}>\n        <div className=\"updateText\">\n          A new version of users is available\n          <button className=\"updateButton\" onClick={updateServiceWorker}>REFRESH</button>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}